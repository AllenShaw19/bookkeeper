syntax = "proto3";
package proto;

option go_package = "github.com/AllenShaw19/bookkeeper/proto";

message Entry {
  int64 index = 1;
  int64 term = 2;
  int64 pos = 3;
  int32 channel = 4;
  bytes body = 5;
}

message Header {
  string group = 1;
  string remote_id = 2;
  string local_id = 3;
  int32 code = 4;
  string leader_id = 5;
  int64 term = 6;
}

message AppendEntryReq {
  Header header = 1;
  bytes body = 2;
};

message AppendEntryResp {
  Header header = 1;
  int64 index = 2;
  int64 pos = 3;
}

message BatchAppendEntryReq {
  Header header = 1;
  repeated bytes messages = 2;
}

message GetEntriesReq {
  Header header = 1;
  int64 begin_index = 2;
  int32 max_size = 3;
  repeated int64 index_list = 4;
}

message GetEntriesResp {
  Header header = 1;
  repeated Entry entries = 2;
}

message HeartBeatReq {
  Header header = 1;
}

message HeartBeatResp {
  Header header = 1;
}

message LeadershipTransferReq {
  Header header = 1;
  string transfer_id = 2;
  string transferee_id = 3;
  int64 take_leadership_log_index = 4;
}

message LeadershipTransferResp {
  Header header = 1;
}

message MetadataReq {
  Header header = 1;
}

message MetadataResp {
  Header header = 1;
  map<string, string> peers = 2;
}

message PullEntriesReq {
  Header header = 1;
  string node_id =2;
  int64  begin_index = 3;
}

message PullEntriesResp {
  Header header = 1;
  repeated Entry entries = 2;
}

message PushEntriesReq {
  Header header = 1;
  int64 commit_index = 2;
  int32 type = 3;
  repeated Entry entry = 4;
  int64 total_size = 5;
}

message PushEntriesResp {
  Header header = 1;
  int64 begin_index = 2;
  int64 end_index = 3;
  int32 count = 4;
}

message VoteReq{
  Header header = 1;
  int64 log_end_index = 2;
  int64 log_end_term = 3;
}

message VoteResp{
  Header header = 1;
  int32 vote_result = 2;
}

service DLog {
  rpc GetEntries(stream GetEntriesReq) returns (stream GetEntriesResp) {}
  rpc AppendEntry(stream AppendEntryReq) returns (stream AppendEntryResp) {}
  rpc Metadata(stream MetadataReq) returns (stream MetadataResp) {}
  rpc LeadershipTransfer(stream LeadershipTransferReq) returns (stream LeadershipTransferResp) {}
  rpc Vote(stream VoteReq) returns (stream VoteResp) {}
  rpc HeartBeat(stream HeartBeatReq) returns (stream HeartBeatResp) {}
  rpc PullEntries(stream PullEntriesReq) returns (stream PullEntriesResp) {}
  rpc PushEntries(stream PushEntriesReq) returns (stream PushEntriesResp) {}
}